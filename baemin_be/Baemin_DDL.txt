create database baemin_db;
use baemin_db;

CREATE TABLE User (
    userID INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    phoneNumber INT NOT NULL UNIQUE,
    firstName VARCHAR(50) NOT NULL,
    lastName VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('BUYER', 'SELLER', 'ADMIN') NOT NULL,
    isActive BOOLEAN NOT NULL DEFAULT TRUE
);


CREATE TABLE Poster (
    posterID INT AUTO_INCREMENT PRIMARY KEY,
    posterThumbnail VARCHAR(255),
    Status BOOLEAN NOT NULL DEFAULT TRUE
);

CREATE TABLE Shop (
    shopID INT AUTO_INCREMENT PRIMARY KEY,
    shopName VARCHAR(255) NOT NULL,
    shopAddress VARCHAR(255),
    shopThumbnail VARCHAR(255),
    category ENUM('Restaurant', 'Bistro', 'Coffee', 'Dessert', 'Shop Online') NOT NULL,
    label ENUM('Food', 'Drink', 'Vege', 'Dessert', 'Noodles') NOT NULL,
    location ENUM('Ho Chi Minh', 'Ha Noi', 'Da Nang') NOT NULL,
    rating DOUBLE,
    openTime DATE,
    closeTime DATE,
    priceStart INT,
    priceEnd INT,
    isOpen BOOLEAN NOT NULL DEFAULT TRUE
);


CREATE TABLE Food (
    foodID INT AUTO_INCREMENT PRIMARY KEY,
    foodName VARCHAR(255) NOT NULL,
    description TEXT,
    price INT NOT NULL,
    type ENUM('combo', 'sale', 'rice chicken', 'bubble tea') NOT NULL,
    shopID INT,
    FOREIGN KEY (shopID) REFERENCES Shop(shopID) ON DELETE CASCADE
);

CREATE TABLE CartItem (
    cartItemID INT AUTO_INCREMENT PRIMARY KEY,
    accountID INT,
    foodID INT,
    quantity INT NOT NULL,
    FOREIGN KEY (accountID) REFERENCES User(userID) ON DELETE CASCADE,
    FOREIGN KEY (foodID) REFERENCES Food(foodID) ON DELETE CASCADE
);

CREATE TABLE Payment (
    paymentID INT AUTO_INCREMENT PRIMARY KEY,
    deliveryAddress VARCHAR(255),
    message TEXT,
    totalCost INT NOT NULL,
    status ENUM('Unpaid', 'Paid') NOT NULL
);

CREATE TABLE Transaction (
    transactionID INT AUTO_INCREMENT PRIMARY KEY,
    foodID INT NOT NULL,
    quantity INT NOT NULL,
    perPrice INT NOT NULL,
    paymentID INT,
    status ENUM('not started', 'in progress', 'complete') NOT NULL,
    FOREIGN KEY (paymentID) REFERENCES Payment(paymentID) ON DELETE CASCADE
);





